<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="31">
  <CheatEntries>
    <CheatEntry>
      <ID>9</ID>
      <Description>"设置游戏速度"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}

if syntaxcheck then return end


[ENABLE]

local speedValue = inputQuery("设置游戏速度", "1普通，大于1加速，小于1减速", 1)
if speedValue == nil then return end

speedhack_setSpeed(speedValue)

 
 
[DISABLE]
speedhack_setSpeed(1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"GOD MODEL"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
//1
HeroBox:OnTriggerEnter2D+1a - E8 11000000           - call HeroBox:CheckForDamage

//2
HeroBox:OnTriggerStay2D+1a - E8 513CFDFF           - call HeroBox:CheckForDamage
HeroBox:OnTriggerStay2D+1a - E8 A592FEFF           - call 1973C054
}


define(address_1,HeroBox:OnTriggerEnter2D+1a)
define(bytes_1,E8 11 00 00 00)

[ENABLE]

// 先检测JIT是否编译
// 如果没编译将找不到函数
{$lua}
  if syntaxcheck then return end
  autorunMonoMethod("HeroBox", "OnTriggerEnter2D")
  autorunMonoMethod("HeroBox", "OnTriggerStay2D")

-- address_2

-- 获取地址
address_2 = getAddressSafe('HeroBox:OnTriggerStay2D+1a')

-- 保存旧的字节集
bytes_2 = readBytes(address_2,5, true)

-- nop
writeBytes(address_2, { 0x90,0x90,0x90,0x90,0x90})
{$asm}

assert(address_1,bytes_1)

address_1:
  db 90 90 90 90 90


[DISABLE]

{$lua}
  if syntaxcheck then return end
  autorunMonoMethod("HeroBox", "OnTriggerEnter2D")
  autorunMonoMethod("HeroBox", "OnTriggerStay2D")
  writeBytes(address_2, bytes_2)
  address_2 = nil
  bytes_2 = nil
{$asm}

address_1:
  db bytes_1

{
// ORIGINAL CODE - INJECTION POINT: 1971871A

197186FE: EB EF                 -  jmp 197186EF
19718700: 55                    -  push ebp
19718701: 8B EC                 -  mov ebp,esp
19718703: 83 EC 08              -  sub esp,08
19718706: 0F B6 05 A0 31 72 14  -  movzx eax,byte ptr [147231A0]
1971870D: 85 C0                 -  test eax,eax
1971870F: 75 11                 -  jne 19718722
19718711: 83 EC 08              -  sub esp,08
19718714: FF 75 0C              -  push [ebp+0C]
19718717: FF 75 08              -  push [ebp+08]
// ---------- INJECTING HERE ----------
1971871A: E8 51 3C FD FF        -  call 196EC370
// ---------- DONE INJECTING  ----------
1971871F: 83 C4 10              -  add esp,10
19718722: C9                    -  leave 
19718723: C3                    -  ret 
19718724: 00 00                 -  add [eax],al
19718726: 00 00                 -  add [eax],al
19718728: 55                    -  push ebp
19718729: 8B EC                 -  mov ebp,esp
1971872B: 83 EC 28              -  sub esp,28
1971872E: D9 45 0C              -  fld dword ptr [ebp+0C]
19718731: D9 45 14              -  fld dword ptr [ebp+14]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"一击必杀"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
  HealthManager:TakeDamage+c94 - 89 87 A4000000        - mov [edi+000000A4],eax
}

define(address,HealthManager:TakeDamage+c94)
define(bytes,89 87 A4 00 00 00)

[ENABLE]

{$lua}
  if syntaxcheck then return end
  autorunMonoMethod("HealthManager", "TakeDamage")
{$asm}

assert(address,bytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  mov eax,0
code:
  mov [edi+000000A4],eax
  jmp return

address:
  jmp newmem
  nop
return:

[DISABLE]

{$lua}
  if syntaxcheck then return end
  autorunMonoMethod("HealthManager", "TakeDamage")
{$asm}

address:
  db bytes
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 19723CEC

19723CC7: 8B 8D FC FD FF FF              -  mov ecx,[ebp-00000204]
19723CCD: 0F 45 C8                       -  cmovne ecx,eax
19723CD0: 89 8D FC FD FF FF              -  mov [ebp-00000204],ecx
19723CD6: 8B 87 A4 00 00 00              -  mov eax,[edi+000000A4]
19723CDC: 2B C1                          -  sub eax,ecx
19723CDE: 83 EC 08                       -  sub esp,08
19723CE1: 6A CE                          -  push -32
19723CE3: 50                             -  push eax
19723CE4: E8 2F CB 2E EC                 -  call 05A10818
19723CE9: 83 C4 10                       -  add esp,10
// ---------- INJECTING HERE ----------
19723CEC: 89 87 A4 00 00 00              -  mov [edi+000000A4],eax
// ---------- DONE INJECTING  ----------
19723CF2: 85 C0                          -  test eax,eax
19723CF4: 7E 49                          -  jle 19723D3F
19723CF6: 0F B6 45 20                    -  movzx eax,byte ptr [ebp+20]
19723CFA: 83 EC 08                       -  sub esp,08
19723CFD: 50                             -  push eax
19723CFE: 57                             -  push edi
19723CFF: E8 9C 25 00 00                 -  call 197262A0
19723D04: 83 C4 10                       -  add esp,10
19723D07: 8B 87 A0 00 00 00              -  mov eax,[edi+000000A0]
19723D0D: 83 EC 0C                       -  sub esp,0C
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"HP BASE"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
  读取HP时
  HeroAnimationController:PlayIdle+d - 8B 80 84000000        - mov eax,[eax+00000084]

  被攻击时
  PlayerData:TakeHealth+6a - 2B 45 0C              - sub eax,[ebp+0C]
}

define(address,HeroAnimationController:PlayIdle+d)
define(bytes,8B 80 84 00 00 00)

[ENABLE]

{$lua}
  if syntaxcheck then return end
  autorunMonoMethod("HeroAnimationController", "PlayIdle")
{$asm}

assert(address,bytes)
alloc(newmem,$1000)

label(code)
label(return)

label(pPlayer)
label(pFeaturesStatus)

newmem:
  pushf
  push ecx

  mov [pPlayer],eax

  mov cl,byte ptr [pFeaturesStatus]
  test cl,cl
  je @f
  mov ecx,[eax+88]
  mov [eax+84],ecx

@@:
  mov cl,byte ptr [pFeaturesStatus+1]
  test cl,cl
  je @f
  mov [eax+C0],#100

@@:
  mov cl,byte ptr [pFeaturesStatus+2]
  test cl,cl
  je code
  mov [eax+B8],#99999

code:
  pop ecx
  popf
  mov eax,[eax+00000084]
  jmp return

align 10 CC
pPlayer:
  dd 0
  align 4
pFeaturesStatus:
  db 0 // 锁血？
  db 0 // 满备用HP?
  db 0 // 99999金币?
  align 4

address:
  jmp newmem
  nop
return:
registerSymbol(pPlayer pFeaturesStatus)
[DISABLE]

{$lua}
  if syntaxcheck then return end
  autorunMonoMethod("HeroAnimationController", "PlayIdle")
{$asm}

address:
  db bytes
unregisterSymbol(pPlayer pFeaturesStatus)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0E9265A5

0E926592: C9                    -  leave 
0E926593: C3                    -  ret 
0E926594: 00 00                 -  add [eax],al
0E926596: 00 00                 -  add [eax],al
0E926598: 55                    -  push ebp
0E926599: 8B EC                 -  mov ebp,esp
0E92659B: 57                    -  push edi
0E92659C: 83 EC 04              -  sub esp,04
0E92659F: 8B 7D 08              -  mov edi,[ebp+08]
0E9265A2: 8B 47 18              -  mov eax,[edi+18]
// ---------- INJECTING HERE ----------
0E9265A5: 8B 80 84 00 00 00     -  mov eax,[eax+00000084]
// ---------- DONE INJECTING  ----------
0E9265AB: 3D 01 00 00 00        -  cmp eax,00000001
0E9265B0: 0F 85 54 00 00 00     -  jne 0E92660A
0E9265B6: 8B 47 18              -  mov eax,[edi+18]
0E9265B9: 8B 80 90 00 00 00     -  mov eax,[eax+00000090]
0E9265BF: 3D 01 00 00 00        -  cmp eax,00000001
0E9265C4: 7D 44                 -  jnl 0E92660A
0E9265C6: 8B 47 18              -  mov eax,[edi+18]
0E9265C9: 0F B6 80 F6 03 00 00  -  movzx eax,byte ptr [eax+000003F6]
0E9265D0: 85 C0                 -  test eax,eax
0E9265D2: 74 1B                 -  je 0E9265EF
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>14</ID>
          <Description>"无限HP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
pFeaturesStatus:
  db 1

[DISABLE]
pFeaturesStatus:
  db 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"99999金币"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
pFeaturesStatus+2:
  db 1

 
 
[DISABLE]
pFeaturesStatus+2:
  db 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16</ID>
          <Description>"满备用HP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
pFeaturesStatus+1:
  db 1

 
 
[DISABLE]
pFeaturesStatus+1:
  db 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"hp"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[pPlayer]+84</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"金币"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[pPlayer]+b8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"备用HP"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[pPlayer]+c0</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"x连发"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}

if syntaxcheck then return end

[ENABLE]

-- 每隔40毫秒检测x见是否按下
xkeyid = setInterval(function()
  if isKeyPressed(0x58) then
    doKeyPress(0x58)
  end
end, 40)

[DISABLE]
clearInterval(xkeyid)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"x"</Description>
      <VariableType>Float</VariableType>
      <Address>"hollow_knight.exe"+01051A80</Address>
      <Offsets>
        <Offset>2c</Offset>
        <Offset>5C</Offset>
        <Offset>8</Offset>
        <Offset>44</Offset>
        <Offset>0</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"y"</Description>
      <VariableType>Float</VariableType>
      <Address>"hollow_knight.exe"+01051A80</Address>
      <Offsets>
        <Offset>30</Offset>
        <Offset>5C</Offset>
        <Offset>8</Offset>
        <Offset>44</Offset>
        <Offset>0</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"-"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>"hollow_knight.exe"+01051A80</Address>
      <Offsets>
        <Offset>0</Offset>
        <Offset>5C</Offset>
        <Offset>8</Offset>
        <Offset>44</Offset>
        <Offset>0</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>21</ID>
      <Description>"飞行模式"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}

if syntaxcheck then return end

-- y的移动速度
local speed = 0.8

-- y
local yAddr = "[[[[[hollow_knight.exe+01051A80]+0]+44]+8]+5C]+30"

-- -
local modelAddr = "[[[[[hollow_knight.exe+01051A80]+0]+44]+8]+5C]+0"


[ENABLE]

-- 开启飞行模式，先将model改为4
writeInteger(modelAddr, 4)

-- 每隔20毫秒执行一次函数
tid = setInterval(function()

  -- 按下F12关闭脚本
  if isKeyPressed(VK_F12) then
   memrec.Active = false
  end

  -- 获取当前y值
  local y = readFloat(yAddr)
  if y == nil then return end

  -- 按下键盘上键,增加y
  if isKeyPressed(VK_UP) then
    writeFloat(yAddr, y + speed)
  end

  -- 按下键盘下键,减少y
  if isKeyPressed(VK_DOWN) then
    writeFloat(yAddr, y - speed)
  end

end, 20)

[DISABLE]

-- 关闭脚本

-- 结束计时器
clearInterval(tid)

-- 将模式改为2
writeInteger(modelAddr, 2)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry Color="20000000">
      <Description>替换了 call eax</Description>
      <AddressString>196EA405</AddressString>
      <Before>
        <Byte>75</Byte>
        <Byte>08</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>14</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>D0</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>10</Byte>
        <Byte>C7</Byte>
        <Byte>45</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>替换了 call HeroBox:CheckForDamage</Description>
      <AddressString>196EC35A</AddressString>
      <Before>
        <Byte>75</Byte>
        <Byte>0C</Byte>
        <Byte>FF</Byte>
        <Byte>75</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>11</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>10</Byte>
        <Byte>C9</Byte>
        <Byte>C3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>替换了 call HeroBox:CheckForDamage</Description>
      <AddressString>1971871A</AddressString>
      <Before>
        <Byte>75</Byte>
        <Byte>0C</Byte>
        <Byte>FF</Byte>
        <Byte>75</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>51</Byte>
        <Byte>3C</Byte>
        <Byte>FD</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>10</Byte>
        <Byte>C9</Byte>
        <Byte>C3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>替换了 mov [esi+40],edx</Description>
      <AddressString>hollow_knight.exe+2AF28</AddressString>
      <Before>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>46</Byte>
        <Byte>38</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>56</Byte>
        <Byte>40</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>4E</Byte>
        <Byte>44</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>替换了 mov [ebp-000000F0],00000014</Description>
      <AddressString>hollow_knight.exe+2DDE1</AddressString>
      <Before>
        <Byte>85</Byte>
        <Byte>08</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>C7</Byte>
        <Byte>85</Byte>
        <Byte>10</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>85</Byte>
        <Byte>14</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>代码 :mov [esi+0C],eax</Description>
      <AddressString>hollow_knight.exe+2A289</AddressString>
      <Before>
        <Byte>4D</Byte>
        <Byte>F0</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>0C</Byte>
        <Byte>89</Byte>
        <Byte>56</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
  <Structures StructVersion="2">
    <Structure Name="x" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="无符号整数"/>
        <Element Offset="12" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="21" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="无符号整数"/>
        <Element Offset="24" Vartype="Float" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="28" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="36" Vartype="Float" Bytesize="4" RLECount="4" DisplayMethod="无符号整数"/>
        <Element Offset="54" Vartype="Byte" Bytesize="1" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="56" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="无符号整数"/>
        <Element Offset="68" Vartype="Float" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="72" Vartype="4 Bytes" Bytesize="4" RLECount="4" DisplayMethod="无符号整数"/>
        <Element Offset="88" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="92" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="96" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="100" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="104" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="112" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="120" Vartype="Float" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="124" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="无符号整数"/>
        <Element Offset="136" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="144" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="148" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="152" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="160" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="164" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="168" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="172" Vartype="Float" Bytesize="4" RLECount="10" DisplayMethod="无符号整数"/>
        <Element Offset="212" Vartype="4 Bytes" Bytesize="4" RLECount="4" DisplayMethod="无符号整数"/>
        <Element Offset="228" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="236" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="240" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="248" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="252" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="260" Vartype="Float" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="264" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="268" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="276" Vartype="4 Bytes" Bytesize="4" RLECount="8" DisplayMethod="无符号整数"/>
        <Element Offset="308" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="316" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="320" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="324" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="328" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="332" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="340" Vartype="Float" Bytesize="4" RLECount="8" DisplayMethod="无符号整数"/>
        <Element Offset="372" Vartype="4 Bytes" Bytesize="4" RLECount="4" DisplayMethod="无符号整数"/>
        <Element Offset="388" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="396" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="400" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="408" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="412" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="420" Vartype="Float" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="424" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="428" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="436" Vartype="4 Bytes" Bytesize="4" RLECount="9" DisplayMethod="无符号整数"/>
        <Element Offset="472" Vartype="Float" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="476" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="480" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="484" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="488" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="492" Vartype="Float" Bytesize="4" RLECount="10" DisplayMethod="无符号整数"/>
        <Element Offset="532" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="无符号整数"/>
        <Element Offset="535" Vartype="2 Bytes" Bytesize="2" DisplayMethod="无符号整数"/>
        <Element Offset="537" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="无符号整数"/>
        <Element Offset="540" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="544" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="552" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="556" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="560" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="568" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="572" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="580" Vartype="Float" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="584" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="588" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="596" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="604" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="608" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="612" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="616" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="624" Vartype="4 Bytes" Bytesize="4" RLECount="4" DisplayMethod="无符号整数"/>
        <Element Offset="640" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="644" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="648" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="652" Vartype="Float" Bytesize="4" RLECount="9" DisplayMethod="无符号整数"/>
        <Element Offset="688" Vartype="Byte" Bytesize="1" DisplayMethod="无符号整数"/>
        <Element Offset="689" Vartype="String" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="693" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="无符号整数"/>
        <Element Offset="696" Vartype="Float" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="700" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="708" Vartype="Float" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="712" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="无符号整数"/>
        <Element Offset="716" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="720" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="728" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="732" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="无符号整数"/>
        <Element Offset="736" Vartype="Float" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="740" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="744" Vartype="Float" Bytesize="4" RLECount="5" DisplayMethod="无符号整数"/>
        <Element Offset="764" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="768" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="772" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="776" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="784" Vartype="4 Bytes" Bytesize="4" RLECount="4" DisplayMethod="无符号整数"/>
        <Element Offset="800" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="804" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="808" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="812" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="816" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="820" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="824" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="828" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="832" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="836" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="840" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="844" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="848" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="852" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="856" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="864" Vartype="Byte" Bytesize="1" DisplayMethod="无符号整数"/>
        <Element Offset="865" Vartype="String" Bytesize="5" DisplayMethod="无符号整数"/>
        <Element Offset="870" Vartype="Byte" Bytesize="1" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="872" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="880" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="888" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="892" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="900" Vartype="Float" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="904" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="908" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="916" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="无符号整数"/>
        <Element Offset="920" Vartype="Float" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="924" Vartype="4 Bytes" Bytesize="4" DisplayMethod="无符号整数"/>
        <Element Offset="928" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="932" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="936" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="944" Vartype="4 Bytes" Bytesize="4" RLECount="4" DisplayMethod="无符号整数"/>
        <Element Offset="960" Vartype="Pointer" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="964" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="972" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="980" Vartype="Double" Bytesize="8" DisplayMethod="无符号整数"/>
        <Element Offset="988" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="无符号整数"/>
        <Element Offset="996" Vartype="Float" Bytesize="4" RLECount="4" DisplayMethod="无符号整数"/>
        <Element Offset="1012" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="无符号整数"/>
      </Elements>
    </Structure>
  </Structures>
  <Comments>HeroBox:OnTriggerEnter2D+1a - E8 11000000           - call HeroBox:CheckForDamage
HeroBox:OnTriggerStay2D+1a - E8 513CFDFF           - call HeroBox:CheckForDamage
</Comments>
</CheatTable>
